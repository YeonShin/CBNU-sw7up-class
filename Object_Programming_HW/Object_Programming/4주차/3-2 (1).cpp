/***************************************************************************************************/
/*                                 HW#2 : 개선된 함수 기능                                         */
/*                   작성자 : 김연신                    날짜 : 2023년 3월 27일                     */  
/*                                                                                                 */
/* 문제 정의 : 두 정수를 받아 더 큰수를 판별하고 큰 수 값이 최댓값보다 작다면 큰 수 값을 반환하고  */
/*             최댓값보다 크다면 최댓값을 반환하는 함수를 2개 중복하여 작성하는 프로그램           */
/***************************************************************************************************/


#include <iostream>
using namespace std;
// 정수 매개변수 a와 b를 받아 더 큰 수를 함수에 작성된 최댓값 100과 비교해 100보다 작다면 a와 b중 큰 수 값, 100보다 크다면 100을 반환하는 함수 선언부
int big(int a, int b); 
// 정수 매개변수 a와 b, max를 받아 a와 b를 비교한 후 더 큰 수를 최댓값 max와 비교해 max보다 작다면 a와 b중 큰 수 값, 크다면 max 반환하는 함수 선언부
int big(int a, int b, int max = 100); 

// 정수 변수 a와 b를 매개변수로 가지는 함수 big 

int big(int a, int b) {
	if (a > b)
		if (a > 100)
		{
			return 100; // a > b 이며, a > 100일 경우 100을 함수 big의 결과값으로 반환
		}
		else {
			return a; // a > b 이며, a < 100일 경우 a의 값을 함수 big의 결과값으로 반환
		}
	else {
		if (b > 100) {
			return 100; // a < b 이며, b < 100일 경우 b의 값을 함수 big의 결과값으로 반환
		}
		else
		{
			return b; // a < b 이며, b > 100일 경우 100을 함수 big의 결과값으로 반환
		}
	}
}

// 정수 변수 a와 b, max를 매개변수로 가지는 함수 big 이 때 두 함수의 이름이 중복되지만 매개변수의 수가 다르므로 함수 중복이 성공
int big(int a, int b, int max) {
	if (a > b) {
		if (a < max) {
			return a; // a > b 이며, a < max일 경우 a의 값을 함수 big의 결과값으로 반환
		}
		else
		{
			return max; // a > b 이며, a > max일 경우 max의 값을 함수 big의 결과값으로 반환
		}
	}
	else {
		if (b < max) {
			return b; // a < b 이며, b < max일 경우 b의 값을 함수 big의 결과값으로 반환
		}
		else {
			return max; // a < b 이며, b > max일 경우 max의 값을 함수 big의 결과값으로 반환
		}

	}
}

int main() {
	int x = big(3, 5); // 3과 5중 큰 값 5는 최댓값 100보다 작으므로, 5 리턴
	int y = big(300, 60); // 300과 60중 큰 값 300이 최댓값 100보다 크므로, 100리턴
	int z = big(30, 60, 50); // 30과 60중 큰 값 60이 최댓값 50보다 크므로, 50리턴
	cout << x << ' ' << y << ' ' << z << endl;
	return 0;
}